type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("row", 1)
                        .value("column", 1)
                        .value("price", 10)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seat {
        private int row;
        private int column;
        @JsonIgnore
        private boolean purchased;
        @JsonIgnore
        private int price;

        public boolean isPurchased() {
            return purchased;
        }

        public void setPurchased(boolean purchased) {
            this.purchased = purchased;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/InvalidSeatException.java
  visible: true
  text: |
    package cinema;

    public class InvalidSeatException extends Exception {
        public InvalidSeatException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/cinema/MovieTheaterInfo.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonProperty;

    import java.util.List;

    public class MovieTheaterInfo {
        @JsonProperty("total_rows")
        private int totalRows;
        @JsonProperty("total_columns")
        private int totalColumns;
        @JsonProperty("available_seats")
        private List<Seat> availableSeats;

        public int getTotalRows() {
            return totalRows;
        }

        public void setTotalRows(int totalRows) {
            this.totalRows = totalRows;
        }

        public int getTotalColumns() {
            return totalColumns;
        }

        public void setTotalColumns(int totalColumns) {
            this.totalColumns = totalColumns;
        }

        public List<Seat> getAvailableSeats() {
            return availableSeats;
        }

        public void setAvailableSeats(List<Seat> availableSeats) {
            this.availableSeats = availableSeats;
        }
    }
  learner_created: true
- name: src/cinema/MovieTheaterController.java
  visible: true
  text: |
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    @RequestMapping("/seats")
    public class MovieTheaterController {

        private final MovieTheaterService movieTheaterService;

        public MovieTheaterController(MovieTheaterService movieTheaterService) {
            this.movieTheaterService = movieTheaterService;
        }

        @GetMapping
        public MovieTheaterInfo getMovieTheaterInfo() {
            return movieTheaterService.getMovieTheaterInfo();
        }

        @PostMapping("/purchase")
        public ResponseEntity<Object> purchaseTicket(@RequestBody Seat seat) {
            try {
                Seat purchasedSeat = movieTheaterService.purchaseTicket(seat);
                return ResponseEntity.ok(purchasedSeat);
            } catch (SeatAlreadyTakenException e) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The ticket has already been purchased!");
            } catch (InvalidSeatException e) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("The number of a row or a column is out of bounds!");
            }
        }
    }
  learner_created: true
- name: src/cinema/SeatAlreadyTakenException.java
  visible: true
  text: |+
    package cinema;

    public class SeatAlreadyTakenException extends Exception {
        public SeatAlreadyTakenException(String message) {
            super(message);
        }
    }

  learner_created: true
- name: src/cinema/MovieTheaterService.java
  visible: true
  text: |
    package cinema;

    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.List;

    @Service
    public class MovieTheaterService {
        private final int totalRows = 9;
        private final int totalColumns = 9;
        private List<Seat> availableSeats;

        public MovieTheaterService() {
            availableSeats = generateAvailableSeats();
        }

        public MovieTheaterInfo getMovieTheaterInfo() {
            MovieTheaterInfo movieTheaterInfo = new MovieTheaterInfo();
            movieTheaterInfo.setTotalRows(totalRows);
            movieTheaterInfo.setTotalColumns(totalColumns);
            movieTheaterInfo.setAvailableSeats(generateAvailableSeats());

            return movieTheaterInfo;
        }

        public Seat purchaseTicket(Seat seat) throws SeatAlreadyTakenException, InvalidSeatException {
            if (isSeatOutOfBounds(seat)) {
                throw new InvalidSeatException("The number of a row or a column is out of bounds!");
            }

            Seat selectedSeat = findSeat(seat.getRow(), seat.getColumn());
            if (selectedSeat == null) {
                throw new InvalidSeatException("The number of a row or a column is out of bounds!");
            }

            if (selectedSeat.isPurchased()) {
                throw new SeatAlreadyTakenException("The ticket has already been purchased!");
            }

            int price = calculateTicketPrice(seat.getRow());
            selectedSeat.setPurchased(true);
            selectedSeat.setPrice(price);

            return selectedSeat;
        }

        private List<Seat> generateAvailableSeats() {
            List<Seat> seats = new ArrayList<>();

            for (int row = 1; row <= totalRows; row++) {
                for (int column = 1; column <= totalColumns; column++) {
                    Seat seat = new Seat(row, column);
                    seats.add(seat);
                }
            }

            return seats;
        }

        private boolean isSeatOutOfBounds(Seat seat) {
            return seat.getRow() < 1 || seat.getRow() > totalRows || seat.getColumn() < 1 || seat.getColumn() > totalColumns;
        }

        private Seat findSeat(int row, int column) {
            for (Seat seat : availableSeats) {
                if (seat.getRow() == row && seat.getColumn() == column) {
                    return seat;
                }
            }
            return null;
        }

        private int calculateTicketPrice(int row) {
            return (row <= 4) ? 10 : 8;
        }
    }
  learner_created: true
- name: src/cinema/SeatDTO.java
  visible: true
  learner_created: true
- name: src/cinema/Error.java
  visible: true
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13376#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sat, 20 May 2023 21:43:54 UTC"
record: 2
